if (Boolean.valueOf(rootProject.ext.moduleWanAndroid)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

kapt {
    arguments {
        arg("moduleName", project.getName())
    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        //MultiDex分包方法
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    /*java插件引入了一个概念叫做SourceSets，通过修改SourceSets中的属性，可以指定哪些源文件
    （或文件夹下的源文件）要被编译，哪些源文件要被排除。*/
    sourceSets {
        main {
            if (rootProject.ext.moduleWanAndroid) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //Arouter路由
    implementation 'com.android.support.constraint:constraint-layout:1.1.1'
    kapt rootProject.ext.dependencies["arouter_compiler"]
    //黄油刀
    annotationProcessor rootProject.ext.dependencies["butterknife_compiler"]
    //公用依赖包
    implementation project(':baseUtilLib')
    implementation project(':basereslib')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
